import cv2
import numpy as np

def extract_lanes(image):

    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 150)

    height, width = edges.shape[:2]
    roi_vertices = np.array([[(0, height), (width/2, height/2), (width, height)]], dtype=np.int32)
    roi_mask = np.zeros_like(edges)
    cv2.fillPoly(roi_mask, roi_vertices, 255)
    roi_edges = cv2.bitwise_and(edges, roi_mask)

    lines = cv2.HoughLinesP(roi_edges, rho=1, theta=np.pi/180, threshold=50, minLineLength=20, maxLineGap=100)

    left_lines = []
    right_lines = []
    
    for line in lines:
        x1, y1, x2, y2 = line[0]
        slope = (y2 - y1) / (x2 - x1)

        if slope < -0.5:  
            left_lines.append(line)
        elif slope > 0.55: 
            right_lines.append(line)

    left_lane = average_lines(left_lines, height)
    right_lane = average_lines(right_lines, height)

    lane_image = draw_lines(image, [left_lane, right_lane])
    
    return lane_image

def average_lines(lines, height):
    if len(lines) == 0:
        return None
    
    x1_avg = np.mean([line[0][0] for line in lines])
    y1_avg = np.mean([line[0][1] for line in lines])
    x2_avg = np.mean([line[0][2] for line in lines])
    y2_avg = np.mean([line[0][3] for line in lines])
    
    slope = (y2_avg - y1_avg) / (x2_avg - x1_avg)
    intercept = y1_avg - slope * x1_avg
    
    y1 = height
    x1 = int((y1 - intercept) / slope)
    y2 = int(height * 0.60)
    x2 = int((y2 - intercept) / slope)
    
    return [[x1, y1, x2, y2]]

def draw_lines(image, lines):
    line_image = np.zeros_like(image)
    
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line[0]
            cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 5)
    
    return cv2.addWeighted(image, 0.8, line_image, 1, 0)



image = cv2.imread('photos/road1.jpg')
lane_image = extract_lanes(image)

cv2.imshow("Original image",image)
cv2.imshow("Lane Detection", lane_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
